
stm32f103c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  4 .ARM          00000000  08000688  08000688  00010690  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000688  08000690  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000690  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000690  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021f0  00000000  00000000  000106b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005b7  00000000  00000000  000128a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000f8  00000000  00000000  00012e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c0  00000000  00000000  00012f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000221e  00000000  00000000  00013018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001298  00000000  00000000  00015236  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008497  00000000  00000000  000164ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002cc  00000000  00000000  0001e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000670 	.word	0x08000670

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000670 	.word	0x08000670

08000170 <main>:
#include <EXTI_driver.h>
#include <stdint.h>
#include <stdlib.h>
uint8_t data ;
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	UART_CONF cnf;
	cnf.Baud_Rate = UART_BAUD_RATE_115200;
 8000176:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017a:	607b      	str	r3, [r7, #4]
	cnf.Length = UART_DATA_BITS_9 ;
 800017c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000180:	81bb      	strh	r3, [r7, #12]
	cnf.IRQ_Enable = UART_IRQ_EN_NONE;
 8000182:	2300      	movs	r3, #0
 8000184:	73fb      	strb	r3, [r7, #15]
	cnf.Parity = UART_BARITY_EVEN;
 8000186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018a:	813b      	strh	r3, [r7, #8]
	cnf.Stop_Bits = UART_STOP_BITS_1;
 800018c:	2300      	movs	r3, #0
 800018e:	72bb      	strb	r3, [r7, #10]
	cnf.USART_MODE = UART_MODE_RX_TX;
 8000190:	230c      	movs	r3, #12
 8000192:	72fb      	strb	r3, [r7, #11]
	cnf.USARTx = USART1 ;
 8000194:	4b09      	ldr	r3, [pc, #36]	; (80001bc <main+0x4c>)
 8000196:	603b      	str	r3, [r7, #0]
	cnf.hwFlowCtl = UART_flow_ctl_NON;
 8000198:	2300      	movs	r3, #0
 800019a:	73bb      	strb	r3, [r7, #14]
	mcal_uart_init(&cnf);
 800019c:	463b      	mov	r3, r7
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 f932 	bl	8000408 <mcal_uart_init>
	mcal_uart_pin_init(USART1);
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <main+0x4c>)
 80001a6:	f000 fa17 	bl	80005d8 <mcal_uart_pin_init>


	while(1)
	{
		mcal_uart_send_data(&data, USART1);
 80001aa:	4904      	ldr	r1, [pc, #16]	; (80001bc <main+0x4c>)
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <main+0x50>)
 80001ae:	f000 f9e7 	bl	8000580 <mcal_uart_send_data>
		mcal_uart_receive_data(&data, USART1);
 80001b2:	4902      	ldr	r1, [pc, #8]	; (80001bc <main+0x4c>)
 80001b4:	4802      	ldr	r0, [pc, #8]	; (80001c0 <main+0x50>)
 80001b6:	f000 f9f9 	bl	80005ac <mcal_uart_receive_data>
		mcal_uart_send_data(&data, USART1);
 80001ba:	e7f6      	b.n	80001aa <main+0x3a>
 80001bc:	40013800 	.word	0x40013800
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001c4:	480d      	ldr	r0, [pc, #52]	; (80001fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001cc:	480c      	ldr	r0, [pc, #48]	; (8000200 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ce:	490d      	ldr	r1, [pc, #52]	; (8000204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d0:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <LoopForever+0xe>)
  movs r3, #0
 80001d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d4:	e002      	b.n	80001dc <LoopCopyDataInit>

080001d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001da:	3304      	adds	r3, #4

080001dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e0:	d3f9      	bcc.n	80001d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e2:	4a0a      	ldr	r2, [pc, #40]	; (800020c <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e4:	4c0a      	ldr	r4, [pc, #40]	; (8000210 <LoopForever+0x16>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e8:	e001      	b.n	80001ee <LoopFillZerobss>

080001ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001ec:	3204      	adds	r2, #4

080001ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f0:	d3fb      	bcc.n	80001ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001f2:	f000 fa19 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001f6:	f7ff ffbb 	bl	8000170 <main>

080001fa <LoopForever>:

LoopForever:
    b LoopForever
 80001fa:	e7fe      	b.n	80001fa <LoopForever>
  ldr   r0, =_estack
 80001fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000204:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000208:	08000690 	.word	0x08000690
  ldr r2, =_sbss
 800020c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000210:	20000020 	.word	0x20000020

08000214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000214:	e7fe      	b.n	8000214 <ADC1_2_IRQHandler>

08000216 <pos>:
#include <stdlib.h>
#include <stm32f103x6.h>
#include <gpio_driver.h>

uint32_t pos(uint32_t pin)
{
 8000216:	b480      	push	{r7}
 8000218:	b083      	sub	sp, #12
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
	switch (pin)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b80      	cmp	r3, #128	; 0x80
 8000222:	d042      	beq.n	80002aa <pos+0x94>
 8000224:	2b80      	cmp	r3, #128	; 0x80
 8000226:	d811      	bhi.n	800024c <pos+0x36>
 8000228:	2b08      	cmp	r3, #8
 800022a:	d036      	beq.n	800029a <pos+0x84>
 800022c:	2b08      	cmp	r3, #8
 800022e:	d806      	bhi.n	800023e <pos+0x28>
 8000230:	2b02      	cmp	r3, #2
 8000232:	d02e      	beq.n	8000292 <pos+0x7c>
 8000234:	2b04      	cmp	r3, #4
 8000236:	d02e      	beq.n	8000296 <pos+0x80>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d028      	beq.n	800028e <pos+0x78>
 800023c:	e047      	b.n	80002ce <pos+0xb8>
 800023e:	2b20      	cmp	r3, #32
 8000240:	d02f      	beq.n	80002a2 <pos+0x8c>
 8000242:	2b40      	cmp	r3, #64	; 0x40
 8000244:	d02f      	beq.n	80002a6 <pos+0x90>
 8000246:	2b10      	cmp	r3, #16
 8000248:	d029      	beq.n	800029e <pos+0x88>
 800024a:	e040      	b.n	80002ce <pos+0xb8>
 800024c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000250:	d033      	beq.n	80002ba <pos+0xa4>
 8000252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000256:	d809      	bhi.n	800026c <pos+0x56>
 8000258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800025c:	d029      	beq.n	80002b2 <pos+0x9c>
 800025e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000262:	d028      	beq.n	80002b6 <pos+0xa0>
 8000264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000268:	d021      	beq.n	80002ae <pos+0x98>
 800026a:	e030      	b.n	80002ce <pos+0xb8>
 800026c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000270:	d027      	beq.n	80002c2 <pos+0xac>
 8000272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000276:	d803      	bhi.n	8000280 <pos+0x6a>
 8000278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800027c:	d01f      	beq.n	80002be <pos+0xa8>
 800027e:	e026      	b.n	80002ce <pos+0xb8>
 8000280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000284:	d01f      	beq.n	80002c6 <pos+0xb0>
 8000286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800028a:	d01e      	beq.n	80002ca <pos+0xb4>
 800028c:	e01f      	b.n	80002ce <pos+0xb8>
	{
	case pin0 :
		return 0;
 800028e:	2300      	movs	r3, #0
 8000290:	e01d      	b.n	80002ce <pos+0xb8>
		break;
	case pin1 :
		return 4;
 8000292:	2304      	movs	r3, #4
 8000294:	e01b      	b.n	80002ce <pos+0xb8>
		break;
	case pin2 :
		return 8;
 8000296:	2308      	movs	r3, #8
 8000298:	e019      	b.n	80002ce <pos+0xb8>
		break;
	case pin3 :
		return 12;
 800029a:	230c      	movs	r3, #12
 800029c:	e017      	b.n	80002ce <pos+0xb8>
		break;
	case pin4 :
		return 16;
 800029e:	2310      	movs	r3, #16
 80002a0:	e015      	b.n	80002ce <pos+0xb8>
		break;
	case pin5 :
		return 20;
 80002a2:	2314      	movs	r3, #20
 80002a4:	e013      	b.n	80002ce <pos+0xb8>
		break;
	case pin6 :
		return 24;
 80002a6:	2318      	movs	r3, #24
 80002a8:	e011      	b.n	80002ce <pos+0xb8>
		break;
	case pin7 :
		return 28;
 80002aa:	231c      	movs	r3, #28
 80002ac:	e00f      	b.n	80002ce <pos+0xb8>
		break;
	case pin8 :
		return 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	e00d      	b.n	80002ce <pos+0xb8>
		break;
	case pin9 :
		return 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	e00b      	b.n	80002ce <pos+0xb8>
		break;
	case pin10 :
		return 8;
 80002b6:	2308      	movs	r3, #8
 80002b8:	e009      	b.n	80002ce <pos+0xb8>
		break;
	case pin11 :
		return 12;
 80002ba:	230c      	movs	r3, #12
 80002bc:	e007      	b.n	80002ce <pos+0xb8>
		break;
	case pin12 :
		return 16;
 80002be:	2310      	movs	r3, #16
 80002c0:	e005      	b.n	80002ce <pos+0xb8>
		break;
	case pin13 :
		return 20;
 80002c2:	2314      	movs	r3, #20
 80002c4:	e003      	b.n	80002ce <pos+0xb8>
		break;
	case pin14 :
		return 24;
 80002c6:	2318      	movs	r3, #24
 80002c8:	e001      	b.n	80002ce <pos+0xb8>
		break;
	case pin15 :
		return 28;
 80002ca:	231c      	movs	r3, #28
 80002cc:	e7ff      	b.n	80002ce <pos+0xb8>
		break;
	}
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <MCAL_GPIO_INIT>:

//void MCAL_GPIO_LOCKPIN		(GPIOx_R* GPIOx , uint8_t pinNumper);


void MCAL_GPIO_INIT			(GPIOx_R* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	volatile uint32_t *confreg =NULL ;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
	confreg = ((PinConfig->GPIO_PinNumber)<pin8)? &GPIOx->CRL : &GPIOx->CRH ;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2bff      	cmp	r3, #255	; 0xff
 80002ec:	d801      	bhi.n	80002f2 <MCAL_GPIO_INIT+0x1a>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	e001      	b.n	80002f6 <MCAL_GPIO_INIT+0x1e>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3304      	adds	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
	*confreg &= ~(0xf<<pos(PinConfig->GPIO_PinNumber));
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff8a 	bl	8000216 <pos>
 8000302:	4602      	mov	r2, r0
 8000304:	230f      	movs	r3, #15
 8000306:	4093      	lsls	r3, r2
 8000308:	43da      	mvns	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	401a      	ands	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE<4)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	791b      	ldrb	r3, [r3, #4]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d84e      	bhi.n	80003ba <MCAL_GPIO_INIT+0xe2>
	{
		switch (PinConfig->GPIO_MODE)
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	791b      	ldrb	r3, [r3, #4]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d016      	beq.n	8000352 <MCAL_GPIO_INIT+0x7a>
 8000324:	2b03      	cmp	r3, #3
 8000326:	d02d      	beq.n	8000384 <MCAL_GPIO_INIT+0xac>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d000      	beq.n	800032e <MCAL_GPIO_INIT+0x56>


	}


}
 800032c:	e067      	b.n	80003fe <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	461c      	mov	r4, r3
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff6c 	bl	8000216 <pos>
 800033e:	4603      	mov	r3, r0
 8000340:	3302      	adds	r3, #2
 8000342:	fa04 f203 	lsl.w	r2, r4, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	431a      	orrs	r2, r3
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	601a      	str	r2, [r3, #0]
			break;
 8000350:	e055      	b.n	80003fe <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	791b      	ldrb	r3, [r3, #4]
 8000356:	461c      	mov	r4, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff5a 	bl	8000216 <pos>
 8000362:	4603      	mov	r3, r0
 8000364:	3302      	adds	r3, #2
 8000366:	fa04 f203 	lsl.w	r2, r4, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	431a      	orrs	r2, r3
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68da      	ldr	r2, [r3, #12]
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	431a      	orrs	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	60da      	str	r2, [r3, #12]
			break;
 8000382:	e03c      	b.n	80003fe <MCAL_GPIO_INIT+0x126>
			*confreg |= (PinConfig->GPIO_MODE-1) << (pos(PinConfig->GPIO_PinNumber)+2);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	1e5c      	subs	r4, r3, #1
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff41 	bl	8000216 <pos>
 8000394:	4603      	mov	r3, r0
 8000396:	3302      	adds	r3, #2
 8000398:	fa04 f203 	lsl.w	r2, r4, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	431a      	orrs	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	43db      	mvns	r3, r3
 80003b0:	401a      	ands	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60da      	str	r2, [r3, #12]
			break;
 80003b6:	bf00      	nop
 80003b8:	e021      	b.n	80003fe <MCAL_GPIO_INIT+0x126>
		*confreg |= (PinConfig->GPIO_MODE-4) << (pos(PinConfig->GPIO_PinNumber)+2);
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	1f1c      	subs	r4, r3, #4
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff26 	bl	8000216 <pos>
 80003ca:	4603      	mov	r3, r0
 80003cc:	3302      	adds	r3, #2
 80003ce:	fa04 f203 	lsl.w	r2, r4, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	601a      	str	r2, [r3, #0]
		*confreg |= (PinConfig->GPIO_Output_Speed) << (pos(PinConfig->GPIO_PinNumber));
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	461c      	mov	r4, r3
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff15 	bl	8000216 <pos>
 80003ec:	4603      	mov	r3, r0
 80003ee:	fa04 f203 	lsl.w	r2, r4, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	431a      	orrs	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	e7ff      	b.n	80003fe <MCAL_GPIO_INIT+0x126>
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bd90      	pop	{r4, r7, pc}
	...

08000408 <mcal_uart_init>:
{
	return ( get_AHB_clk()>> APB_TABLE[ ( (RCC->CFGR >>11) & 0b111 ) ] );
}

void mcal_uart_init(UART_CONF* conf)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	USART_R* usart = conf->USARTx ;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60fb      	str	r3, [r7, #12]
	if(conf->USARTx == USART1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a51      	ldr	r2, [pc, #324]	; (8000560 <mcal_uart_init+0x158>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <mcal_uart_init+0x26>
		RCC_USART1_CLK_EN();
 8000420:	4b50      	ldr	r3, [pc, #320]	; (8000564 <mcal_uart_init+0x15c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a4f      	ldr	r2, [pc, #316]	; (8000564 <mcal_uart_init+0x15c>)
 8000426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	e016      	b.n	800045c <mcal_uart_init+0x54>
	else if(conf->USARTx == USART2)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a4d      	ldr	r2, [pc, #308]	; (8000568 <mcal_uart_init+0x160>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <mcal_uart_init+0x3e>
		RCC_USART2_CLK_EN();
 8000438:	4b4a      	ldr	r3, [pc, #296]	; (8000564 <mcal_uart_init+0x15c>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4a49      	ldr	r2, [pc, #292]	; (8000564 <mcal_uart_init+0x15c>)
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000442:	61d3      	str	r3, [r2, #28]
 8000444:	e00a      	b.n	800045c <mcal_uart_init+0x54>
	else if(conf->USARTx == USART3)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a48      	ldr	r2, [pc, #288]	; (800056c <mcal_uart_init+0x164>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d105      	bne.n	800045c <mcal_uart_init+0x54>
		RCC_USART3_CLK_EN();
 8000450:	4b44      	ldr	r3, [pc, #272]	; (8000564 <mcal_uart_init+0x15c>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a43      	ldr	r2, [pc, #268]	; (8000564 <mcal_uart_init+0x15c>)
 8000456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800045a:	61d3      	str	r3, [r2, #28]
	//1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	usart->CR1 |= UART_UE ;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	usart->CR1 |= conf->Length ;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	8992      	ldrh	r2, [r2, #12]
 8000470:	431a      	orrs	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2.
	usart->CR2 |= conf->Stop_Bits;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7a92      	ldrb	r2, [r2, #10]
 800047e:	431a      	orrs	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	611a      	str	r2, [r3, #16]
	//4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to take
					//place. Configure the DMA register as explained in multibuffer communication.

	//5. Select the desired baud rate using the USART_BRR register.
	usart->BRR |= fraction(conf->Baud_Rate);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4938      	ldr	r1, [pc, #224]	; (8000570 <mcal_uart_init+0x168>)
 8000490:	fbb1 f1f3 	udiv	r1, r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	4836      	ldr	r0, [pc, #216]	; (8000574 <mcal_uart_init+0x16c>)
 800049c:	fbb0 f3f3 	udiv	r3, r0, r3
 80004a0:	2064      	movs	r0, #100	; 0x64
 80004a2:	fb00 f303 	mul.w	r3, r0, r3
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	4933      	ldr	r1, [pc, #204]	; (8000578 <mcal_uart_init+0x170>)
 80004ac:	fba1 1303 	umull	r1, r3, r1, r3
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	431a      	orrs	r2, r3
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	609a      	str	r2, [r3, #8]
	usart->BRR |= mantisa(conf->Baud_Rate) << 4;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	492c      	ldr	r1, [pc, #176]	; (8000574 <mcal_uart_init+0x16c>)
 80004c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	431a      	orrs	r2, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	609a      	str	r2, [r3, #8]
	//6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
	//6. Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit
	usart->CR1 |= conf->USART_MODE ;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7ad2      	ldrb	r2, [r2, #11]
 80004d8:	431a      	orrs	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	60da      	str	r2, [r3, #12]
	//7. select the parity mode
	usart->CR1 |= conf->Parity ;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	8912      	ldrh	r2, [r2, #8]
 80004e6:	431a      	orrs	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	60da      	str	r2, [r3, #12]
	//8. flow ctrl
	usart->CR3 |= conf->hwFlowCtl ;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	7b92      	ldrb	r2, [r2, #14]
 80004f4:	431a      	orrs	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	615a      	str	r2, [r3, #20]
	//9. IRQ ENABLE
	if (conf->IRQ_Enable != UART_IRQ_EN_NONE)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	7bdb      	ldrb	r3, [r3, #15]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d029      	beq.n	8000556 <mcal_uart_init+0x14e>
	{
		usart->CR1 |= conf->IRQ_Enable ;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7bd2      	ldrb	r2, [r2, #15]
 800050a:	431a      	orrs	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	60da      	str	r2, [r3, #12]
		if(conf->USARTx == USART1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <mcal_uart_init+0x158>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <mcal_uart_init+0x120>
			NVIC_USART1_IRQ_15_EN;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <mcal_uart_init+0x174>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <mcal_uart_init+0x174>)
 8000520:	f043 0320 	orr.w	r3, r3, #32
 8000524:	6013      	str	r3, [r2, #0]
		else if(conf->USARTx == USART2)
			NVIC_USART2_IRQ_15_EN;
		else if(conf->USARTx == USART3)
			NVIC_USART3_IRQ_15_EN;
	}
}
 8000526:	e016      	b.n	8000556 <mcal_uart_init+0x14e>
		else if(conf->USARTx == USART2)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <mcal_uart_init+0x160>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <mcal_uart_init+0x138>
			NVIC_USART2_IRQ_15_EN;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <mcal_uart_init+0x174>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <mcal_uart_init+0x174>)
 8000538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	e00a      	b.n	8000556 <mcal_uart_init+0x14e>
		else if(conf->USARTx == USART3)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <mcal_uart_init+0x164>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d105      	bne.n	8000556 <mcal_uart_init+0x14e>
			NVIC_USART3_IRQ_15_EN;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <mcal_uart_init+0x174>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <mcal_uart_init+0x174>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40013800 	.word	0x40013800
 8000564:	40021000 	.word	0x40021000
 8000568:	40004400 	.word	0x40004400
 800056c:	40004800 	.word	0x40004800
 8000570:	35a4e900 	.word	0x35a4e900
 8000574:	02255100 	.word	0x02255100
 8000578:	51eb851f 	.word	0x51eb851f
 800057c:	e000e104 	.word	0xe000e104

08000580 <mcal_uart_send_data>:

void mcal_uart_send_data(uint8_t* DATA , USART_R* UARTx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	while(! (UARTx->SR & 1<<7 ) );
 800058a:	bf00      	nop
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <mcal_uart_send_data+0xc>
	UARTx->DR = (*DATA & (uint16_t)0xff);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	605a      	str	r2, [r3, #4]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <mcal_uart_receive_data>:

void mcal_uart_receive_data(uint8_t* buffer ,USART_R* UARTx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	while(! (UARTx->SR & 1<<5 ) );
 80005b6:	bf00      	nop
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f9      	beq.n	80005b8 <mcal_uart_receive_data+0xc>
	*buffer = UARTx->DR & (uint16_t) 0xff;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <mcal_uart_pin_init>:

void mcal_uart_pin_init(USART_R* UARTx)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

	if(UARTx == USART1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <mcal_uart_pin_init+0x48>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d117      	bne.n	8000618 <mcal_uart_pin_init+0x40>
	{
		GPIO_PinConfig_t cnf;
		cnf.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80005e8:	2306      	movs	r3, #6
 80005ea:	733b      	strb	r3, [r7, #12]
		cnf.GPIO_Output_Speed = GPIO_SPEED_10_MHZ;
 80005ec:	2301      	movs	r3, #1
 80005ee:	737b      	strb	r3, [r7, #13]
		cnf.GPIO_PinNumber = pin9;
 80005f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f4:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOA, &cnf);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4619      	mov	r1, r3
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <mcal_uart_pin_init+0x4c>)
 80005fe:	f7ff fe6b 	bl	80002d8 <MCAL_GPIO_INIT>
		cnf.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000602:	2302      	movs	r3, #2
 8000604:	733b      	strb	r3, [r7, #12]
		cnf.GPIO_PinNumber = pin10;
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOA, &cnf);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <mcal_uart_pin_init+0x4c>)
 8000614:	f7ff fe60 	bl	80002d8 <MCAL_GPIO_INIT>
	}

}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40013800 	.word	0x40013800
 8000624:	40010800 	.word	0x40010800

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	2500      	movs	r5, #0
 800062c:	4e0c      	ldr	r6, [pc, #48]	; (8000660 <__libc_init_array+0x38>)
 800062e:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	42a5      	cmp	r5, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	f000 f81a 	bl	8000670 <_init>
 800063c:	2500      	movs	r5, #0
 800063e:	4e0a      	ldr	r6, [pc, #40]	; (8000668 <__libc_init_array+0x40>)
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <__libc_init_array+0x44>)
 8000642:	1ba4      	subs	r4, r4, r6
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	42a5      	cmp	r5, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000650:	4798      	blx	r3
 8000652:	3501      	adds	r5, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800065a:	4798      	blx	r3
 800065c:	3501      	adds	r5, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	08000688 	.word	0x08000688
 8000664:	08000688 	.word	0x08000688
 8000668:	08000688 	.word	0x08000688
 800066c:	0800068c 	.word	0x0800068c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
