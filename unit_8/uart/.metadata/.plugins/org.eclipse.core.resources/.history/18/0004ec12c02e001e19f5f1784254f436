/*
 * UART_DRIVER.h
 *
 *  Created on: Jul 24, 2023
 *      Author: abdom
 */

#ifndef UART_DRIVER_H_
#define UART_DRIVER_H_


////////////////////////////////////Transmitter////////////////////////////////////////////////////
//1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
//2. Program the M bit in USART_CR1 to define the word length.
//3. Program the number of stop bits in USART_CR2.
//noooooooooooooo//4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to take
				//place. Configure the DMA register as explained in multibuffer communication.
//5. Select the desired baud rate using the USART_BRR register.
//6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
//7. Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this
				//for each data to be transmitted in case of single buffer.
//8. After writing the last data into the USART_DR register, wait until TC=1. This indicates
				//that the transmission of the last frame is complete. This is required for instance when
				//the USART is disabled or enters the Halt mode to avoid corrupting the last
				//transmission.
typedef struct
{
	uint32_t USARTx;
	uint32_t Baud_Rate;
	uint8_t Parity;
	uint8_t  Stop_Bits;
	uint8_t USART_MODE;			//@REF usart_mode
	uint8_t Length;				//@REF DATA_LENGTH
	uint8_t hwFlowCtl;
	uint8_t IRQ_Enable;

}usart_conf;


////////////////////@REF usart_mode//////////////////////
#define UART_MODE_RX				(uint32_t) (1<<2)
#define UART_MODE_tX				(uint32_t) (1<<3)
#define UART_MODE_RX_TX				((uint32_t) (1<<2 | 1<<3))

/////////////////////@REF DATA_LENGTH/////////////////////
#define 8_DATA_BITS				(uint32_t) (1<<12)
#define UART_MODE_tX				(uint32_t) (1<<12)


#endif /* UART_DRIVER_H_ */
