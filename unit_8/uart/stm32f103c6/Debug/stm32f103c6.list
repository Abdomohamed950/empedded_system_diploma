
stm32f103c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000480  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000480  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bf1  00000000  00000000  000104a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000239  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000088  00000000  00000000  000112d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00011360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c54  00000000  00000000  000113d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000721  00000000  00000000  00013024  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000082a9  00000000  00000000  00013745  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  0001ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000460 	.word	0x08000460

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000460 	.word	0x08000460

08000170 <pos>:
#include <stdlib.h>
#include <stm32f103x6.h>
#include <gpio_driver.h>

uint32_t pos(uint32_t pin)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	switch (pin)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b80      	cmp	r3, #128	; 0x80
 800017c:	d042      	beq.n	8000204 <pos+0x94>
 800017e:	2b80      	cmp	r3, #128	; 0x80
 8000180:	d811      	bhi.n	80001a6 <pos+0x36>
 8000182:	2b08      	cmp	r3, #8
 8000184:	d036      	beq.n	80001f4 <pos+0x84>
 8000186:	2b08      	cmp	r3, #8
 8000188:	d806      	bhi.n	8000198 <pos+0x28>
 800018a:	2b02      	cmp	r3, #2
 800018c:	d02e      	beq.n	80001ec <pos+0x7c>
 800018e:	2b04      	cmp	r3, #4
 8000190:	d02e      	beq.n	80001f0 <pos+0x80>
 8000192:	2b01      	cmp	r3, #1
 8000194:	d028      	beq.n	80001e8 <pos+0x78>
 8000196:	e047      	b.n	8000228 <pos+0xb8>
 8000198:	2b20      	cmp	r3, #32
 800019a:	d02f      	beq.n	80001fc <pos+0x8c>
 800019c:	2b40      	cmp	r3, #64	; 0x40
 800019e:	d02f      	beq.n	8000200 <pos+0x90>
 80001a0:	2b10      	cmp	r3, #16
 80001a2:	d029      	beq.n	80001f8 <pos+0x88>
 80001a4:	e040      	b.n	8000228 <pos+0xb8>
 80001a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001aa:	d033      	beq.n	8000214 <pos+0xa4>
 80001ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b0:	d809      	bhi.n	80001c6 <pos+0x56>
 80001b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b6:	d029      	beq.n	800020c <pos+0x9c>
 80001b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001bc:	d028      	beq.n	8000210 <pos+0xa0>
 80001be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c2:	d021      	beq.n	8000208 <pos+0x98>
 80001c4:	e030      	b.n	8000228 <pos+0xb8>
 80001c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001ca:	d027      	beq.n	800021c <pos+0xac>
 80001cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d0:	d803      	bhi.n	80001da <pos+0x6a>
 80001d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d6:	d01f      	beq.n	8000218 <pos+0xa8>
 80001d8:	e026      	b.n	8000228 <pos+0xb8>
 80001da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001de:	d01f      	beq.n	8000220 <pos+0xb0>
 80001e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e4:	d01e      	beq.n	8000224 <pos+0xb4>
 80001e6:	e01f      	b.n	8000228 <pos+0xb8>
	{
	case pin0 :
		return 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e01d      	b.n	8000228 <pos+0xb8>
		break;
	case pin1 :
		return 4;
 80001ec:	2304      	movs	r3, #4
 80001ee:	e01b      	b.n	8000228 <pos+0xb8>
		break;
	case pin2 :
		return 8;
 80001f0:	2308      	movs	r3, #8
 80001f2:	e019      	b.n	8000228 <pos+0xb8>
		break;
	case pin3 :
		return 12;
 80001f4:	230c      	movs	r3, #12
 80001f6:	e017      	b.n	8000228 <pos+0xb8>
		break;
	case pin4 :
		return 16;
 80001f8:	2310      	movs	r3, #16
 80001fa:	e015      	b.n	8000228 <pos+0xb8>
		break;
	case pin5 :
		return 20;
 80001fc:	2314      	movs	r3, #20
 80001fe:	e013      	b.n	8000228 <pos+0xb8>
		break;
	case pin6 :
		return 24;
 8000200:	2318      	movs	r3, #24
 8000202:	e011      	b.n	8000228 <pos+0xb8>
		break;
	case pin7 :
		return 28;
 8000204:	231c      	movs	r3, #28
 8000206:	e00f      	b.n	8000228 <pos+0xb8>
		break;
	case pin8 :
		return 0;
 8000208:	2300      	movs	r3, #0
 800020a:	e00d      	b.n	8000228 <pos+0xb8>
		break;
	case pin9 :
		return 4;
 800020c:	2304      	movs	r3, #4
 800020e:	e00b      	b.n	8000228 <pos+0xb8>
		break;
	case pin10 :
		return 8;
 8000210:	2308      	movs	r3, #8
 8000212:	e009      	b.n	8000228 <pos+0xb8>
		break;
	case pin11 :
		return 12;
 8000214:	230c      	movs	r3, #12
 8000216:	e007      	b.n	8000228 <pos+0xb8>
		break;
	case pin12 :
		return 16;
 8000218:	2310      	movs	r3, #16
 800021a:	e005      	b.n	8000228 <pos+0xb8>
		break;
	case pin13 :
		return 20;
 800021c:	2314      	movs	r3, #20
 800021e:	e003      	b.n	8000228 <pos+0xb8>
		break;
	case pin14 :
		return 24;
 8000220:	2318      	movs	r3, #24
 8000222:	e001      	b.n	8000228 <pos+0xb8>
		break;
	case pin15 :
		return 28;
 8000224:	231c      	movs	r3, #28
 8000226:	e7ff      	b.n	8000228 <pos+0xb8>
		break;
	}
}
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr

08000232 <MCAL_GPIO_WRITEPIN>:
{
	return GPIOx->IDR & 0x0000ffff;
}

void MCAL_GPIO_WRITEPIN		(GPIOx_R* GPIOx , uint32_t pinNumper , uint8_t Value)
{
 8000232:	b480      	push	{r7}
 8000234:	b085      	sub	sp, #20
 8000236:	af00      	add	r7, sp, #0
 8000238:	60f8      	str	r0, [r7, #12]
 800023a:	60b9      	str	r1, [r7, #8]
 800023c:	4613      	mov	r3, r2
 800023e:	71fb      	strb	r3, [r7, #7]
	switch (Value)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <MCAL_GPIO_WRITEPIN+0x1a>
 8000246:	2b01      	cmp	r3, #1
 8000248:	d004      	beq.n	8000254 <MCAL_GPIO_WRITEPIN+0x22>
		break;
	case 1 :
		GPIOx->BSRR = pinNumper;
		break;
	}
}
 800024a:	e007      	b.n	800025c <MCAL_GPIO_WRITEPIN+0x2a>
		GPIOx->BRR = pinNumper;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	68ba      	ldr	r2, [r7, #8]
 8000250:	615a      	str	r2, [r3, #20]
		break;
 8000252:	e003      	b.n	800025c <MCAL_GPIO_WRITEPIN+0x2a>
		GPIOx->BSRR = pinNumper;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	611a      	str	r2, [r3, #16]
		break;
 800025a:	bf00      	nop
}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <MCAL_GPIO_INIT>:

//void MCAL_GPIO_LOCKPIN		(GPIOx_R* GPIOx , uint8_t pinNumper);


void MCAL_GPIO_INIT			(GPIOx_R* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000266:	b590      	push	{r4, r7, lr}
 8000268:	b085      	sub	sp, #20
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
	volatile uint32_t *confreg =NULL ;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
	confreg = ((PinConfig->GPIO_PinNumber)<pin8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d801      	bhi.n	8000280 <MCAL_GPIO_INIT+0x1a>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	e001      	b.n	8000284 <MCAL_GPIO_INIT+0x1e>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3304      	adds	r3, #4
 8000284:	60fb      	str	r3, [r7, #12]
	*confreg &= ~(0xf<<pos(PinConfig->GPIO_PinNumber));
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ff70 	bl	8000170 <pos>
 8000290:	4602      	mov	r2, r0
 8000292:	230f      	movs	r3, #15
 8000294:	4093      	lsls	r3, r2
 8000296:	43da      	mvns	r2, r3
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	401a      	ands	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE<4)
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	d84e      	bhi.n	8000348 <MCAL_GPIO_INIT+0xe2>
	{
		switch (PinConfig->GPIO_MODE)
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d016      	beq.n	80002e0 <MCAL_GPIO_INIT+0x7a>
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d02d      	beq.n	8000312 <MCAL_GPIO_INIT+0xac>
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d000      	beq.n	80002bc <MCAL_GPIO_INIT+0x56>


	}


}
 80002ba:	e067      	b.n	800038c <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	461c      	mov	r4, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff52 	bl	8000170 <pos>
 80002cc:	4603      	mov	r3, r0
 80002ce:	3302      	adds	r3, #2
 80002d0:	fa04 f203 	lsl.w	r2, r4, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	431a      	orrs	r2, r3
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
			break;
 80002de:	e055      	b.n	800038c <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	461c      	mov	r4, r3
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff40 	bl	8000170 <pos>
 80002f0:	4603      	mov	r3, r0
 80002f2:	3302      	adds	r3, #2
 80002f4:	fa04 f203 	lsl.w	r2, r4, r3
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	431a      	orrs	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
			break;
 8000310:	e03c      	b.n	800038c <MCAL_GPIO_INIT+0x126>
			*confreg |= (PinConfig->GPIO_MODE-1) << (pos(PinConfig->GPIO_PinNumber)+2);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	1e5c      	subs	r4, r3, #1
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff27 	bl	8000170 <pos>
 8000322:	4603      	mov	r3, r0
 8000324:	3302      	adds	r3, #2
 8000326:	fa04 f203 	lsl.w	r2, r4, r3
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	431a      	orrs	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	43db      	mvns	r3, r3
 800033e:	401a      	ands	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	60da      	str	r2, [r3, #12]
			break;
 8000344:	bf00      	nop
 8000346:	e021      	b.n	800038c <MCAL_GPIO_INIT+0x126>
		*confreg |= (PinConfig->GPIO_MODE-4) << (pos(PinConfig->GPIO_PinNumber)+2);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	1f1c      	subs	r4, r3, #4
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff0c 	bl	8000170 <pos>
 8000358:	4603      	mov	r3, r0
 800035a:	3302      	adds	r3, #2
 800035c:	fa04 f203 	lsl.w	r2, r4, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	431a      	orrs	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]
		*confreg |= (PinConfig->GPIO_Output_Speed) << (pos(PinConfig->GPIO_PinNumber));
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	461c      	mov	r4, r3
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff fefb 	bl	8000170 <pos>
 800037a:	4603      	mov	r3, r0
 800037c:	fa04 f203 	lsl.w	r2, r4, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	431a      	orrs	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	e7ff      	b.n	800038c <MCAL_GPIO_INIT+0x126>
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bd90      	pop	{r4, r7, pc}

08000394 <main>:
#include <EXTI_driver.h>
#include <stdint.h>
#include <stdlib.h>
uint8_t data ;
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
//	mcal_uart_send_data(data, USART1);



	GPIO_PinConfig_t pinconf;
	pinconf.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800039a:	2304      	movs	r3, #4
 800039c:	713b      	strb	r3, [r7, #4]
	pinconf.GPIO_Output_Speed = GPIO_SPEED_50_MHZ;
 800039e:	2303      	movs	r3, #3
 80003a0:	717b      	strb	r3, [r7, #5]
	pinconf.GPIO_PinNumber = pin9;
 80003a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003a6:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_INIT(GPIOA, &pinconf);
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <main+0x2c>)
 80003ae:	f7ff ff5a 	bl	8000266 <MCAL_GPIO_INIT>
	MCAL_GPIO_WRITEPIN(GPIOA, pin9, 1);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b8:	4801      	ldr	r0, [pc, #4]	; (80003c0 <main+0x2c>)
 80003ba:	f7ff ff3a 	bl	8000232 <MCAL_GPIO_WRITEPIN>
	while(1)
 80003be:	e7fe      	b.n	80003be <main+0x2a>
 80003c0:	40010800 	.word	0x40010800

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ffcd 	bl	8000394 <main>

080003fa <LoopForever>:

LoopForever:
    b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	2000001c 	.word	0x2000001c

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2500      	movs	r5, #0
 800041c:	4e0c      	ldr	r6, [pc, #48]	; (8000450 <__libc_init_array+0x38>)
 800041e:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 8000420:	1ba4      	subs	r4, r4, r6
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	42a5      	cmp	r5, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	f000 f81a 	bl	8000460 <_init>
 800042c:	2500      	movs	r5, #0
 800042e:	4e0a      	ldr	r6, [pc, #40]	; (8000458 <__libc_init_array+0x40>)
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <__libc_init_array+0x44>)
 8000432:	1ba4      	subs	r4, r4, r6
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	42a5      	cmp	r5, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000440:	4798      	blx	r3
 8000442:	3501      	adds	r5, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800044a:	4798      	blx	r3
 800044c:	3501      	adds	r5, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
