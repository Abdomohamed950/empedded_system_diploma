
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006f8  08000700  00010700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006f8  080006f8  00010700  2**0
                  CONTENTS
  4 .ARM          00000000  080006f8  080006f8  00010700  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006f8  08000700  00010700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f8  080006f8  000106f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006fc  080006fc  000106fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000700  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000700  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010700  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021bb  00000000  00000000  00010729  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005cd  00000000  00000000  000128e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00012eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00012f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000204f  00000000  00000000  00013030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000126f  00000000  00000000  0001507f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000850a  00000000  00000000  000162ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e7f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  0001e874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006e0 	.word	0x080006e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006e0 	.word	0x080006e0

08000170 <main>:
#endif
#include <EXTI_driver.h>
#include <gpio_driver.h>
#include <stm32f103x6.h>
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <main+0x64>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <main+0x64>)
 800017c:	f043 0308 	orr.w	r3, r3, #8
 8000180:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <main+0x64>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a13      	ldr	r2, [pc, #76]	; (80001d4 <main+0x64>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
	RCC_GPIOD_CLK_EN();
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <main+0x64>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a10      	ldr	r2, [pc, #64]	; (80001d4 <main+0x64>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <main+0x64>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <main+0x64>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	6193      	str	r3, [r2, #24]
	GPIO_PinConfig_t pincon;
	pincon.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a6:	2304      	movs	r3, #4
 80001a8:	733b      	strb	r3, [r7, #12]
	pincon.GPIO_Output_Speed = GPIO_SPEED_10_MHZ;
 80001aa:	2301      	movs	r3, #1
 80001ac:	737b      	strb	r3, [r7, #13]
	pincon.GPIO_PinNumber = pin3;
 80001ae:	2308      	movs	r3, #8
 80001b0:	60bb      	str	r3, [r7, #8]
	MCAL_GPIO_INIT(GPIOB, &pincon);
 80001b2:	f107 0308 	add.w	r3, r7, #8
 80001b6:	4619      	mov	r1, r3
 80001b8:	4807      	ldr	r0, [pc, #28]	; (80001d8 <main+0x68>)
 80001ba:	f000 f9d6 	bl	800056a <MCAL_GPIO_INIT>

	EXTI_S pin ;
	pin.EXTI_PIN = pin4;
 80001be:	2310      	movs	r3, #16
 80001c0:	80bb      	strh	r3, [r7, #4]
	pin.EXTI_PORT = GPIOA;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <main+0x6c>)
 80001c4:	603b      	str	r3, [r7, #0]
	pin.TRIGER_STATE = triger_rising_and_falling ;
 80001c6:	2302      	movs	r3, #2
 80001c8:	71bb      	strb	r3, [r7, #6]
	MCAL_EXTI_INIT(&pin);
 80001ca:	463b      	mov	r3, r7
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 f85b 	bl	8000288 <MCAL_EXTI_INIT>
    /* Loop forever */
	for(;;);
 80001d2:	e7fe      	b.n	80001d2 <main+0x62>
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	40010800 	.word	0x40010800

080001e0 <EXTI4_IRQHandler>:
}
void EXTI4_IRQHandler()
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	MCAL_GPIO_TOGGLEPIN(GPIOB, pin3);
 80001e4:	2108      	movs	r1, #8
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <EXTI4_IRQHandler+0x1c>)
 80001e8:	f000 f9af 	bl	800054a <MCAL_GPIO_TOGGLEPIN>
	EXTI_PENDING_PIN4_DIS;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <EXTI4_IRQHandler+0x20>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <EXTI4_IRQHandler+0x20>)
 80001f2:	f043 0310 	orr.w	r3, r3, #16
 80001f6:	6153      	str	r3, [r2, #20]
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	40010400 	.word	0x40010400

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c0a      	ldr	r4, [pc, #40]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 fa31 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ff9b 	bl	8000170 <main>

0800023a <LoopForever>:

LoopForever:
    b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	08000700 	.word	0x08000700
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	2000001c 	.word	0x2000001c

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>

08000256 <getLog>:
#include <stdint.h>
#include <gpio_driver.h>
#include <math.h>

uint8_t getLog(uint16_t pin)
{
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	4603      	mov	r3, r0
 800025e:	80fb      	strh	r3, [r7, #6]
	uint8_t x =0;
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]
	while (pin !=0)
 8000264:	e005      	b.n	8000272 <getLog+0x1c>
	{
		x++;
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3301      	adds	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
		pin = pin >> 1;
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	085b      	lsrs	r3, r3, #1
 8000270:	80fb      	strh	r3, [r7, #6]
	while (pin !=0)
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d1f6      	bne.n	8000266 <getLog+0x10>
	}
	return (x-1);
 8000278:	7bfb      	ldrb	r3, [r7, #15]
 800027a:	3b01      	subs	r3, #1
 800027c:	b2db      	uxtb	r3, r3
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <MCAL_EXTI_INIT>:

void MCAL_EXTI_INIT(EXTI_S *exti_conf)
{
 8000288:	b5b0      	push	{r4, r5, r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	//1 - init pin as an input pin
	GPIO_PinConfig_t pin_conf ;
	pin_conf.GPIO_MODE = GPIO_MODE_INPUT_FLOTING;
 8000290:	2301      	movs	r3, #1
 8000292:	733b      	strb	r3, [r7, #12]
	pin_conf.GPIO_PinNumber = exti_conf->EXTI_PIN;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	889b      	ldrh	r3, [r3, #4]
 8000298:	60bb      	str	r3, [r7, #8]
	MCAL_GPIO_INIT(exti_conf->EXTI_PORT, &pin_conf);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f107 0208 	add.w	r2, r7, #8
 80002a2:	4611      	mov	r1, r2
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f960 	bl	800056a <MCAL_GPIO_INIT>

	//2 - select the port of the pin
	AFIO->EXTICR[(getLog(exti_conf->EXTI_PIN)/4)] |= ((port(exti_conf->EXTI_PORT)& 0xf) << (getLog(exti_conf->EXTI_PIN)%4)*4);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a6e      	ldr	r2, [pc, #440]	; (8000468 <MCAL_EXTI_INIT+0x1e0>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d016      	beq.n	80002e2 <MCAL_EXTI_INIT+0x5a>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a6c      	ldr	r2, [pc, #432]	; (800046c <MCAL_EXTI_INIT+0x1e4>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d00f      	beq.n	80002de <MCAL_EXTI_INIT+0x56>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a6b      	ldr	r2, [pc, #428]	; (8000470 <MCAL_EXTI_INIT+0x1e8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d008      	beq.n	80002da <MCAL_EXTI_INIT+0x52>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a69      	ldr	r2, [pc, #420]	; (8000474 <MCAL_EXTI_INIT+0x1ec>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d101      	bne.n	80002d6 <MCAL_EXTI_INIT+0x4e>
 80002d2:	2403      	movs	r4, #3
 80002d4:	e006      	b.n	80002e4 <MCAL_EXTI_INIT+0x5c>
 80002d6:	2400      	movs	r4, #0
 80002d8:	e004      	b.n	80002e4 <MCAL_EXTI_INIT+0x5c>
 80002da:	2402      	movs	r4, #2
 80002dc:	e002      	b.n	80002e4 <MCAL_EXTI_INIT+0x5c>
 80002de:	2401      	movs	r4, #1
 80002e0:	e000      	b.n	80002e4 <MCAL_EXTI_INIT+0x5c>
 80002e2:	2400      	movs	r4, #0
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	889b      	ldrh	r3, [r3, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffb4 	bl	8000256 <getLog>
 80002ee:	4603      	mov	r3, r0
 80002f0:	f003 0303 	and.w	r3, r3, #3
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	fa04 f503 	lsl.w	r5, r4, r3
 80002fa:	4c5f      	ldr	r4, [pc, #380]	; (8000478 <MCAL_EXTI_INIT+0x1f0>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	889b      	ldrh	r3, [r3, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffa8 	bl	8000256 <getLog>
 8000306:	4603      	mov	r3, r0
 8000308:	089b      	lsrs	r3, r3, #2
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4613      	mov	r3, r2
 800030e:	3302      	adds	r3, #2
 8000310:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000314:	462c      	mov	r4, r5
 8000316:	4958      	ldr	r1, [pc, #352]	; (8000478 <MCAL_EXTI_INIT+0x1f0>)
 8000318:	4610      	mov	r0, r2
 800031a:	ea43 0204 	orr.w	r2, r3, r4
 800031e:	1c83      	adds	r3, r0, #2
 8000320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3 -EXTI AVTIVATE STATE RISING OR FALLING
	switch (exti_conf->TRIGER_STATE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d00c      	beq.n	8000346 <MCAL_EXTI_INIT+0xbe>
 800032c:	2b02      	cmp	r3, #2
 800032e:	d013      	beq.n	8000358 <MCAL_EXTI_INIT+0xd0>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d122      	bne.n	800037a <MCAL_EXTI_INIT+0xf2>
	{
	case triger_rising :
		EXTI->RTSR |= exti_conf->EXTI_PIN;
 8000334:	4b51      	ldr	r3, [pc, #324]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	8892      	ldrh	r2, [r2, #4]
 800033c:	4611      	mov	r1, r2
 800033e:	4a4f      	ldr	r2, [pc, #316]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000340:	430b      	orrs	r3, r1
 8000342:	6093      	str	r3, [r2, #8]
		break;
 8000344:	e019      	b.n	800037a <MCAL_EXTI_INIT+0xf2>
	case triger_falling :
		EXTI->FTSR |= exti_conf->EXTI_PIN;
 8000346:	4b4d      	ldr	r3, [pc, #308]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	8892      	ldrh	r2, [r2, #4]
 800034e:	4611      	mov	r1, r2
 8000350:	4a4a      	ldr	r2, [pc, #296]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000352:	430b      	orrs	r3, r1
 8000354:	60d3      	str	r3, [r2, #12]
		break;
 8000356:	e010      	b.n	800037a <MCAL_EXTI_INIT+0xf2>
	case triger_rising_and_falling :
		EXTI->RTSR |= exti_conf->EXTI_PIN;
 8000358:	4b48      	ldr	r3, [pc, #288]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	8892      	ldrh	r2, [r2, #4]
 8000360:	4611      	mov	r1, r2
 8000362:	4a46      	ldr	r2, [pc, #280]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= exti_conf->EXTI_PIN;
 8000368:	4b44      	ldr	r3, [pc, #272]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	8892      	ldrh	r2, [r2, #4]
 8000370:	4611      	mov	r1, r2
 8000372:	4a42      	ldr	r2, [pc, #264]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
		break;
 8000378:	bf00      	nop
	}
	EXTI->IMR |= exti_conf->EXTI_PIN;
 800037a:	4b40      	ldr	r3, [pc, #256]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	8892      	ldrh	r2, [r2, #4]
 8000382:	4611      	mov	r1, r2
 8000384:	4a3d      	ldr	r2, [pc, #244]	; (800047c <MCAL_EXTI_INIT+0x1f4>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]

	//4 - IRQ mask enable in NVIC
	switch (exti_conf->EXTI_PIN)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	889b      	ldrh	r3, [r3, #4]
 800038e:	2b80      	cmp	r3, #128	; 0x80
 8000390:	d057      	beq.n	8000442 <MCAL_EXTI_INIT+0x1ba>
 8000392:	2b80      	cmp	r3, #128	; 0x80
 8000394:	dc11      	bgt.n	80003ba <MCAL_EXTI_INIT+0x132>
 8000396:	2b08      	cmp	r3, #8
 8000398:	d045      	beq.n	8000426 <MCAL_EXTI_INIT+0x19e>
 800039a:	2b08      	cmp	r3, #8
 800039c:	dc06      	bgt.n	80003ac <MCAL_EXTI_INIT+0x124>
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d033      	beq.n	800040a <MCAL_EXTI_INIT+0x182>
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d038      	beq.n	8000418 <MCAL_EXTI_INIT+0x190>
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d028      	beq.n	80003fc <MCAL_EXTI_INIT+0x174>
		break;
	}



}
 80003aa:	e058      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
	switch (exti_conf->EXTI_PIN)
 80003ac:	2b20      	cmp	r3, #32
 80003ae:	d048      	beq.n	8000442 <MCAL_EXTI_INIT+0x1ba>
 80003b0:	2b40      	cmp	r3, #64	; 0x40
 80003b2:	d046      	beq.n	8000442 <MCAL_EXTI_INIT+0x1ba>
 80003b4:	2b10      	cmp	r3, #16
 80003b6:	d03d      	beq.n	8000434 <MCAL_EXTI_INIT+0x1ac>
}
 80003b8:	e051      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
	switch (exti_conf->EXTI_PIN)
 80003ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003be:	d047      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
 80003c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003c4:	dc09      	bgt.n	80003da <MCAL_EXTI_INIT+0x152>
 80003c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003ca:	d03a      	beq.n	8000442 <MCAL_EXTI_INIT+0x1ba>
 80003cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003d0:	d03e      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
 80003d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003d6:	d034      	beq.n	8000442 <MCAL_EXTI_INIT+0x1ba>
}
 80003d8:	e041      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
	switch (exti_conf->EXTI_PIN)
 80003da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003de:	d037      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
 80003e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e4:	dc03      	bgt.n	80003ee <MCAL_EXTI_INIT+0x166>
 80003e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003ea:	d031      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
}
 80003ec:	e037      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
	switch (exti_conf->EXTI_PIN)
 80003ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003f2:	d02d      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
 80003f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003f8:	d02a      	beq.n	8000450 <MCAL_EXTI_INIT+0x1c8>
}
 80003fa:	e030      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ6_EXTI0_EN;
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000406:	6013      	str	r3, [r2, #0]
		break;
 8000408:	e029      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ7_EXTI1_EN;
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000414:	6013      	str	r3, [r2, #0]
		break;
 8000416:	e022      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ8_EXTI2_EN;
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 800041e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000422:	6013      	str	r3, [r2, #0]
		break;
 8000424:	e01b      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ9_EXTI3_EN;
 8000426:	4b16      	ldr	r3, [pc, #88]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a15      	ldr	r2, [pc, #84]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 800042c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000430:	6013      	str	r3, [r2, #0]
		break;
 8000432:	e014      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ10_EXTI4_EN;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 800043a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043e:	6013      	str	r3, [r2, #0]
		break;
 8000440:	e00d      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ23_EXTI5_9_EN;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <MCAL_EXTI_INIT+0x1f8>)
 8000448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800044c:	6013      	str	r3, [r2, #0]
		break;
 800044e:	e006      	b.n	800045e <MCAL_EXTI_INIT+0x1d6>
		NVIC_IRQ40_EXTI10_15_EN;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MCAL_EXTI_INIT+0x1fc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <MCAL_EXTI_INIT+0x1fc>)
 8000456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045a:	6013      	str	r3, [r2, #0]
		break;
 800045c:	bf00      	nop
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bdb0      	pop	{r4, r5, r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800
 800046c:	40010c00 	.word	0x40010c00
 8000470:	40011000 	.word	0x40011000
 8000474:	40011400 	.word	0x40011400
 8000478:	40010000 	.word	0x40010000
 800047c:	40010400 	.word	0x40010400
 8000480:	e000e100 	.word	0xe000e100
 8000484:	e000e104 	.word	0xe000e104

08000488 <pos>:
#include <stdint.h>
#include <stdlib.h>
#include <stm32f103x6.h>
#include <gpio_driver.h>
uint32_t pos(uint32_t pin)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	switch (pin)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b80      	cmp	r3, #128	; 0x80
 8000494:	d042      	beq.n	800051c <pos+0x94>
 8000496:	2b80      	cmp	r3, #128	; 0x80
 8000498:	d811      	bhi.n	80004be <pos+0x36>
 800049a:	2b08      	cmp	r3, #8
 800049c:	d036      	beq.n	800050c <pos+0x84>
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d806      	bhi.n	80004b0 <pos+0x28>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d02e      	beq.n	8000504 <pos+0x7c>
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d02e      	beq.n	8000508 <pos+0x80>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d028      	beq.n	8000500 <pos+0x78>
 80004ae:	e047      	b.n	8000540 <pos+0xb8>
 80004b0:	2b20      	cmp	r3, #32
 80004b2:	d02f      	beq.n	8000514 <pos+0x8c>
 80004b4:	2b40      	cmp	r3, #64	; 0x40
 80004b6:	d02f      	beq.n	8000518 <pos+0x90>
 80004b8:	2b10      	cmp	r3, #16
 80004ba:	d029      	beq.n	8000510 <pos+0x88>
 80004bc:	e040      	b.n	8000540 <pos+0xb8>
 80004be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c2:	d033      	beq.n	800052c <pos+0xa4>
 80004c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c8:	d809      	bhi.n	80004de <pos+0x56>
 80004ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004ce:	d029      	beq.n	8000524 <pos+0x9c>
 80004d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d4:	d028      	beq.n	8000528 <pos+0xa0>
 80004d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004da:	d021      	beq.n	8000520 <pos+0x98>
 80004dc:	e030      	b.n	8000540 <pos+0xb8>
 80004de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e2:	d027      	beq.n	8000534 <pos+0xac>
 80004e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e8:	d803      	bhi.n	80004f2 <pos+0x6a>
 80004ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004ee:	d01f      	beq.n	8000530 <pos+0xa8>
 80004f0:	e026      	b.n	8000540 <pos+0xb8>
 80004f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004f6:	d01f      	beq.n	8000538 <pos+0xb0>
 80004f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004fc:	d01e      	beq.n	800053c <pos+0xb4>
 80004fe:	e01f      	b.n	8000540 <pos+0xb8>
	{
	case pin0 :
		return 0;
 8000500:	2300      	movs	r3, #0
 8000502:	e01d      	b.n	8000540 <pos+0xb8>
		break;
	case pin1 :
		return 4;
 8000504:	2304      	movs	r3, #4
 8000506:	e01b      	b.n	8000540 <pos+0xb8>
		break;
	case pin2 :
		return 8;
 8000508:	2308      	movs	r3, #8
 800050a:	e019      	b.n	8000540 <pos+0xb8>
		break;
	case pin3 :
		return 12;
 800050c:	230c      	movs	r3, #12
 800050e:	e017      	b.n	8000540 <pos+0xb8>
		break;
	case pin4 :
		return 16;
 8000510:	2310      	movs	r3, #16
 8000512:	e015      	b.n	8000540 <pos+0xb8>
		break;
	case pin5 :
		return 20;
 8000514:	2314      	movs	r3, #20
 8000516:	e013      	b.n	8000540 <pos+0xb8>
		break;
	case pin6 :
		return 24;
 8000518:	2318      	movs	r3, #24
 800051a:	e011      	b.n	8000540 <pos+0xb8>
		break;
	case pin7 :
		return 28;
 800051c:	231c      	movs	r3, #28
 800051e:	e00f      	b.n	8000540 <pos+0xb8>
		break;
	case pin8 :
		return 0;
 8000520:	2300      	movs	r3, #0
 8000522:	e00d      	b.n	8000540 <pos+0xb8>
		break;
	case pin9 :
		return 4;
 8000524:	2304      	movs	r3, #4
 8000526:	e00b      	b.n	8000540 <pos+0xb8>
		break;
	case pin10 :
		return 8;
 8000528:	2308      	movs	r3, #8
 800052a:	e009      	b.n	8000540 <pos+0xb8>
		break;
	case pin11 :
		return 12;
 800052c:	230c      	movs	r3, #12
 800052e:	e007      	b.n	8000540 <pos+0xb8>
		break;
	case pin12 :
		return 16;
 8000530:	2310      	movs	r3, #16
 8000532:	e005      	b.n	8000540 <pos+0xb8>
		break;
	case pin13 :
		return 20;
 8000534:	2314      	movs	r3, #20
 8000536:	e003      	b.n	8000540 <pos+0xb8>
		break;
	case pin14 :
		return 24;
 8000538:	2318      	movs	r3, #24
 800053a:	e001      	b.n	8000540 <pos+0xb8>
		break;
	case pin15 :
		return 28;
 800053c:	231c      	movs	r3, #28
 800053e:	e7ff      	b.n	8000540 <pos+0xb8>
		break;
	}
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <MCAL_GPIO_TOGGLEPIN>:
{
	GPIOx->ODR = Value;
}

void MCAL_GPIO_TOGGLEPIN	(GPIOx_R* GPIOx , uint32_t pinNumper)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
	GPIOx->ODR ^= pinNumper ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	405a      	eors	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	60da      	str	r2, [r3, #12]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <MCAL_GPIO_INIT>:

//void MCAL_GPIO_LOCKPIN		(GPIOx_R* GPIOx , uint8_t pinNumper);


void MCAL_GPIO_INIT			(GPIOx_R* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800056a:	b590      	push	{r4, r7, lr}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
	volatile uint32_t *confreg =NULL ;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
	confreg = ((PinConfig->GPIO_PinNumber)<pin8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2bff      	cmp	r3, #255	; 0xff
 800057e:	d801      	bhi.n	8000584 <MCAL_GPIO_INIT+0x1a>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	e001      	b.n	8000588 <MCAL_GPIO_INIT+0x1e>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3304      	adds	r3, #4
 8000588:	60fb      	str	r3, [r7, #12]
	*confreg &= ~(0xf<<pos(PinConfig->GPIO_PinNumber));
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff7a 	bl	8000488 <pos>
 8000594:	4602      	mov	r2, r0
 8000596:	230f      	movs	r3, #15
 8000598:	4093      	lsls	r3, r2
 800059a:	43da      	mvns	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	401a      	ands	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE<4)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d84e      	bhi.n	800064c <MCAL_GPIO_INIT+0xe2>
	{
		switch (PinConfig->GPIO_MODE)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d016      	beq.n	80005e4 <MCAL_GPIO_INIT+0x7a>
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d02d      	beq.n	8000616 <MCAL_GPIO_INIT+0xac>
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d000      	beq.n	80005c0 <MCAL_GPIO_INIT+0x56>


	}


}
 80005be:	e067      	b.n	8000690 <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	461c      	mov	r4, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff5c 	bl	8000488 <pos>
 80005d0:	4603      	mov	r3, r0
 80005d2:	3302      	adds	r3, #2
 80005d4:	fa04 f203 	lsl.w	r2, r4, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	431a      	orrs	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	601a      	str	r2, [r3, #0]
			break;
 80005e2:	e055      	b.n	8000690 <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	461c      	mov	r4, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff4a 	bl	8000488 <pos>
 80005f4:	4603      	mov	r3, r0
 80005f6:	3302      	adds	r3, #2
 80005f8:	fa04 f203 	lsl.w	r2, r4, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	431a      	orrs	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	431a      	orrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]
			break;
 8000614:	e03c      	b.n	8000690 <MCAL_GPIO_INIT+0x126>
			*confreg |= (PinConfig->GPIO_MODE-1) << (pos(PinConfig->GPIO_PinNumber)+2);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	1e5c      	subs	r4, r3, #1
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff31 	bl	8000488 <pos>
 8000626:	4603      	mov	r3, r0
 8000628:	3302      	adds	r3, #2
 800062a:	fa04 f203 	lsl.w	r2, r4, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	431a      	orrs	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	43db      	mvns	r3, r3
 8000642:	401a      	ands	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	60da      	str	r2, [r3, #12]
			break;
 8000648:	bf00      	nop
 800064a:	e021      	b.n	8000690 <MCAL_GPIO_INIT+0x126>
		*confreg |= (PinConfig->GPIO_MODE-4) << (pos(PinConfig->GPIO_PinNumber)+2);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	1f1c      	subs	r4, r3, #4
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff16 	bl	8000488 <pos>
 800065c:	4603      	mov	r3, r0
 800065e:	3302      	adds	r3, #2
 8000660:	fa04 f203 	lsl.w	r2, r4, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	431a      	orrs	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	601a      	str	r2, [r3, #0]
		*confreg |= (PinConfig->GPIO_Output_Speed) << (pos(PinConfig->GPIO_PinNumber));
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	461c      	mov	r4, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff05 	bl	8000488 <pos>
 800067e:	4603      	mov	r3, r0
 8000680:	fa04 f203 	lsl.w	r2, r4, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	e7ff      	b.n	8000690 <MCAL_GPIO_INIT+0x126>
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	2500      	movs	r5, #0
 800069c:	4e0c      	ldr	r6, [pc, #48]	; (80006d0 <__libc_init_array+0x38>)
 800069e:	4c0d      	ldr	r4, [pc, #52]	; (80006d4 <__libc_init_array+0x3c>)
 80006a0:	1ba4      	subs	r4, r4, r6
 80006a2:	10a4      	asrs	r4, r4, #2
 80006a4:	42a5      	cmp	r5, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	f000 f81a 	bl	80006e0 <_init>
 80006ac:	2500      	movs	r5, #0
 80006ae:	4e0a      	ldr	r6, [pc, #40]	; (80006d8 <__libc_init_array+0x40>)
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <__libc_init_array+0x44>)
 80006b2:	1ba4      	subs	r4, r4, r6
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	42a5      	cmp	r5, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006c0:	4798      	blx	r3
 80006c2:	3501      	adds	r5, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ca:	4798      	blx	r3
 80006cc:	3501      	adds	r5, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	080006f8 	.word	0x080006f8
 80006d4:	080006f8 	.word	0x080006f8
 80006d8:	080006f8 	.word	0x080006f8
 80006dc:	080006fc 	.word	0x080006fc

080006e0 <_init>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr

080006ec <_fini>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr
