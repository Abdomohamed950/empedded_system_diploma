/*
 * gpio_driver.c
 *
 *  Created on: Jul 15, 2023
 *      Author: abdom
 */


#include <stdint.h>
#include <stdlib.h>
#include <stm32f103x6.h>
#include <gpio_driver.h>
uint32_t pos(uint32_t pin)
{
	switch (pin)
	{
	case 8 :
		return 1;
		break;
	case 9 :
		return 2;
		break;
	case 10 :
		return 3;
		break;
	case 11 :
		return 4;
		break;
	case 12 :
		return 5;
		break;
	case 13 :
		return 6;
		break;
	case 14 :
		return 7;
		break;
	case 15 :
		return 8;
		break;
	case 16 :
		return 9;
		break;
	default :
		return pin;
		break;
	}
}

void MCAL_GPIO_INIT			(GPIOx_R* GPIOx , GPIO_PinConfig_t* PinConfig)
{
	volatile uint32_t* configreg = NULL;
	configreg = ((PinConfig->GPIO_PinNumber) < pin8)? &GPIOx->CRL : &GPIOx->CRH ;
	*configreg &= ~(0xf<<(pos(PinConfig->GPIO_PinNumber)*4));

	if(PinConfig->GPIO_MODE>3)
	{
		*configreg |= (PinConfig->GPIO_MODE-4)<<((pos(PinConfig->GPIO_PinNumber) *4) +2);
		*configreg |= PinConfig->GPIO_Output_Speed<<(pos(PinConfig->GPIO_PinNumber) *4);
	}

	else
	{
		switch(PinConfig->GPIO_MODE)
		{

		case GPIO_MODE_INPUT_FLOTING:
			//01
			*configreg |= PinConfig->GPIO_MODE<<((pos(PinConfig->GPIO_PinNumber) *4) +2);
			break;
		case GPIO_MODE_INPUT_PU:
			//					10
			*configreg |= PinConfig->GPIO_MODE<<((pos(PinConfig->GPIO_PinNumber) *4) +2);
			GPIOx->ODR |= 0b1<<(PinConfig->GPIO_PinNumber);
			break;
		case GPIO_MODE_INPUT_PD:
			//					11
			*configreg |= PinConfig->GPIO_MODE<<((pos(PinConfig->GPIO_PinNumber) *4) +2);
			GPIOx->ODR &= ~(0b1<<PinConfig->GPIO_PinNumber);
			break;
		}
	}

}

void MCAL_GPIO_DEINIT		(GPIOx_R* GPIOx)
{
	if(GPIOx==GPIOA)
	{
		RCC->APB2RSTR |=  pin2;
		RCC->APB2RSTR &= ~pin2;
	}
	if(GPIOx==GPIOB)
	{
		RCC->APB2RSTR |=  pin3;
		RCC->APB2RSTR &= ~pin3;
	}
	if(GPIOx==GPIOC)
	{
		RCC->APB2RSTR |=  pin4;
		RCC->APB2RSTR &= ~pin4;
	}
	if(GPIOx==GPIOD)
	{
		RCC->APB2RSTR |=  pin5;
		RCC->APB2RSTR &= ~pin5;
	}
	if(GPIOx==GPIOE)
	{
		RCC->APB2RSTR |=  pin6;
		RCC->APB2RSTR &= ~pin6;
	}
}

uint8_t MCAL_GPIO_READPIN	(GPIOx_R* GPIOx , uint8_t pinNumper)
{
	if ((GPIOx->IDR & pinNumper) != 0 )
	{
		return 1 ;
	}
		return 0 ;
}

uint8_t MCAL_GPIO_READPORT	(GPIOx_R* GPIOx)
{
	return GPIOx->IDR & 0x0000ffff;
}

void MCAL_GPIO_WRITEPIN		(GPIOx_R* GPIOx , uint8_t pinNumper , uint8_t Value)
{
	switch (Value)
	{
	case 0 :
		GPIOx->BRR = pinNumper;
		break;
	case 1 :
		GPIOx->BSRR = pinNumper;
		break;
	}
}

void MCAL_GPIO_WRITEPORT  	(GPIOx_R* GPIOx , uint8_t Value)
{
	GPIOx->ODR = Value;
}

void MCAL_GPIO_TOGGLEPIN	(GPIOx_R* GPIOx , uint8_t pinNumper)
{
	GPIOx->ODR ^= pinNumper ;
}

//void MCAL_GPIO_LOCKPIN		(GPIOx_R* GPIOx , uint8_t pinNumper);
