
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  4 .ARM          00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000534  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000534  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000180d  00000000  00000000  0001055d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000396  00000000  00000000  00011d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000030c  00000000  00000000  00012100  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000a0  00000000  00000000  00012410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  000124b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b86  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c4a  00000000  00000000  000140ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007488  00000000  00000000  00014cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c180  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  0001c1fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000514 	.word	0x08000514

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000514 	.word	0x08000514

08000170 <main>:
#include <stm32f103x6.h>
#include <gpio_driver.h>
#include <stdlib.h>

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	//enable clock in PORTA and PORTB
	RCC_GPIOA_CLK_EN();
 8000176:	4b30      	ldr	r3, [pc, #192]	; (8000238 <main+0xc8>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a2f      	ldr	r2, [pc, #188]	; (8000238 <main+0xc8>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000182:	4b2d      	ldr	r3, [pc, #180]	; (8000238 <main+0xc8>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a2c      	ldr	r2, [pc, #176]	; (8000238 <main+0xc8>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]

	GPIO_PinConfig_t pin_conf;
	//    pin a1
	pin_conf.GPIO_MODE = GPIO_MODE_INPUT_FLOTING ;
 800018e:	2301      	movs	r3, #1
 8000190:	723b      	strb	r3, [r7, #8]
	pin_conf.GPIO_PinNumber = pin1 ;
 8000192:	2302      	movs	r3, #2
 8000194:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOA, &pin_conf);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4828      	ldr	r0, [pc, #160]	; (800023c <main+0xcc>)
 800019c:	f000 f8ff 	bl	800039e <MCAL_GPIO_INIT>

	//    pin a13
	pin_conf.GPIO_MODE = GPIO_MODE_INPUT_FLOTING ;
 80001a0:	2301      	movs	r3, #1
 80001a2:	723b      	strb	r3, [r7, #8]
	pin_conf.GPIO_PinNumber = pin13 ;
 80001a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001a8:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOA, &pin_conf);
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	4823      	ldr	r0, [pc, #140]	; (800023c <main+0xcc>)
 80001b0:	f000 f8f5 	bl	800039e <MCAL_GPIO_INIT>

	//    pin p1
	pin_conf.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001b4:	2304      	movs	r3, #4
 80001b6:	723b      	strb	r3, [r7, #8]
	pin_conf.GPIO_Output_Speed = GPIO_SPEED_10_MHZ ;
 80001b8:	2301      	movs	r3, #1
 80001ba:	727b      	strb	r3, [r7, #9]
	pin_conf.GPIO_PinNumber = pin1 ;
 80001bc:	2302      	movs	r3, #2
 80001be:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &pin_conf);
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	4619      	mov	r1, r3
 80001c4:	481e      	ldr	r0, [pc, #120]	; (8000240 <main+0xd0>)
 80001c6:	f000 f8ea 	bl	800039e <MCAL_GPIO_INIT>

	//    pin p13
	pin_conf.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80001ca:	2304      	movs	r3, #4
 80001cc:	723b      	strb	r3, [r7, #8]
	pin_conf.GPIO_Output_Speed = GPIO_SPEED_10_MHZ ;
 80001ce:	2301      	movs	r3, #1
 80001d0:	727b      	strb	r3, [r7, #9]
	pin_conf.GPIO_PinNumber = pin13 ;
 80001d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d6:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &pin_conf);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4619      	mov	r1, r3
 80001dc:	4818      	ldr	r0, [pc, #96]	; (8000240 <main+0xd0>)
 80001de:	f000 f8de 	bl	800039e <MCAL_GPIO_INIT>



	while(1){

		if( MCAL_GPIO_READPIN(GPIOA, pin1)==0)
 80001e2:	2102      	movs	r1, #2
 80001e4:	4815      	ldr	r0, [pc, #84]	; (800023c <main+0xcc>)
 80001e6:	f000 f8b7 	bl	8000358 <MCAL_GPIO_READPIN>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10b      	bne.n	8000208 <main+0x98>
		{
			MCAL_GPIO_TOGGLEPIN(GPIOB, pin1);
 80001f0:	2102      	movs	r1, #2
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <main+0xd0>)
 80001f4:	f000 f8c3 	bl	800037e <MCAL_GPIO_TOGGLEPIN>
			while( MCAL_GPIO_READPIN(GPIOA, pin1)==0);
 80001f8:	bf00      	nop
 80001fa:	2102      	movs	r1, #2
 80001fc:	480f      	ldr	r0, [pc, #60]	; (800023c <main+0xcc>)
 80001fe:	f000 f8ab 	bl	8000358 <MCAL_GPIO_READPIN>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0f8      	beq.n	80001fa <main+0x8a>
		}
		if( MCAL_GPIO_READPIN(GPIOA, pin13)==1)
 8000208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <main+0xcc>)
 800020e:	f000 f8a3 	bl	8000358 <MCAL_GPIO_READPIN>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d104      	bne.n	8000222 <main+0xb2>
		{
			MCAL_GPIO_TOGGLEPIN(GPIOB, pin13);
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	4808      	ldr	r0, [pc, #32]	; (8000240 <main+0xd0>)
 800021e:	f000 f8ae 	bl	800037e <MCAL_GPIO_TOGGLEPIN>
		}
		for(int i= 0 ; i<512; i++);
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	e002      	b.n	800022e <main+0xbe>
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	3301      	adds	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000234:	dbf8      	blt.n	8000228 <main+0xb8>
		if( MCAL_GPIO_READPIN(GPIOA, pin1)==0)
 8000236:	e7d4      	b.n	80001e2 <main+0x72>
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	40010c00 	.word	0x40010c00

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f92b 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ff7b 	bl	8000170 <main>

0800027a <LoopForever>:

LoopForever:
    b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000534 	.word	0x08000534
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>

08000296 <pos>:
#include <stdint.h>
#include <stdlib.h>
#include <stm32f103x6.h>
#include <gpio_driver.h>
uint32_t pos(uint32_t pin)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
	switch (pin)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b80      	cmp	r3, #128	; 0x80
 80002a2:	d042      	beq.n	800032a <pos+0x94>
 80002a4:	2b80      	cmp	r3, #128	; 0x80
 80002a6:	d811      	bhi.n	80002cc <pos+0x36>
 80002a8:	2b08      	cmp	r3, #8
 80002aa:	d036      	beq.n	800031a <pos+0x84>
 80002ac:	2b08      	cmp	r3, #8
 80002ae:	d806      	bhi.n	80002be <pos+0x28>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d02e      	beq.n	8000312 <pos+0x7c>
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d02e      	beq.n	8000316 <pos+0x80>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d028      	beq.n	800030e <pos+0x78>
 80002bc:	e047      	b.n	800034e <pos+0xb8>
 80002be:	2b20      	cmp	r3, #32
 80002c0:	d02f      	beq.n	8000322 <pos+0x8c>
 80002c2:	2b40      	cmp	r3, #64	; 0x40
 80002c4:	d02f      	beq.n	8000326 <pos+0x90>
 80002c6:	2b10      	cmp	r3, #16
 80002c8:	d029      	beq.n	800031e <pos+0x88>
 80002ca:	e040      	b.n	800034e <pos+0xb8>
 80002cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002d0:	d033      	beq.n	800033a <pos+0xa4>
 80002d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002d6:	d809      	bhi.n	80002ec <pos+0x56>
 80002d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002dc:	d029      	beq.n	8000332 <pos+0x9c>
 80002de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002e2:	d028      	beq.n	8000336 <pos+0xa0>
 80002e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002e8:	d021      	beq.n	800032e <pos+0x98>
 80002ea:	e030      	b.n	800034e <pos+0xb8>
 80002ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002f0:	d027      	beq.n	8000342 <pos+0xac>
 80002f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002f6:	d803      	bhi.n	8000300 <pos+0x6a>
 80002f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002fc:	d01f      	beq.n	800033e <pos+0xa8>
 80002fe:	e026      	b.n	800034e <pos+0xb8>
 8000300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000304:	d01f      	beq.n	8000346 <pos+0xb0>
 8000306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800030a:	d01e      	beq.n	800034a <pos+0xb4>
 800030c:	e01f      	b.n	800034e <pos+0xb8>
	{
	case pin0 :
		return 0;
 800030e:	2300      	movs	r3, #0
 8000310:	e01d      	b.n	800034e <pos+0xb8>
		break;
	case pin1 :
		return 4;
 8000312:	2304      	movs	r3, #4
 8000314:	e01b      	b.n	800034e <pos+0xb8>
		break;
	case pin2 :
		return 8;
 8000316:	2308      	movs	r3, #8
 8000318:	e019      	b.n	800034e <pos+0xb8>
		break;
	case pin3 :
		return 12;
 800031a:	230c      	movs	r3, #12
 800031c:	e017      	b.n	800034e <pos+0xb8>
		break;
	case pin4 :
		return 16;
 800031e:	2310      	movs	r3, #16
 8000320:	e015      	b.n	800034e <pos+0xb8>
		break;
	case pin5 :
		return 20;
 8000322:	2314      	movs	r3, #20
 8000324:	e013      	b.n	800034e <pos+0xb8>
		break;
	case pin6 :
		return 24;
 8000326:	2318      	movs	r3, #24
 8000328:	e011      	b.n	800034e <pos+0xb8>
		break;
	case pin7 :
		return 28;
 800032a:	231c      	movs	r3, #28
 800032c:	e00f      	b.n	800034e <pos+0xb8>
		break;
	case pin8 :
		return 0;
 800032e:	2300      	movs	r3, #0
 8000330:	e00d      	b.n	800034e <pos+0xb8>
		break;
	case pin9 :
		return 4;
 8000332:	2304      	movs	r3, #4
 8000334:	e00b      	b.n	800034e <pos+0xb8>
		break;
	case pin10 :
		return 8;
 8000336:	2308      	movs	r3, #8
 8000338:	e009      	b.n	800034e <pos+0xb8>
		break;
	case pin11 :
		return 12;
 800033a:	230c      	movs	r3, #12
 800033c:	e007      	b.n	800034e <pos+0xb8>
		break;
	case pin12 :
		return 16;
 800033e:	2310      	movs	r3, #16
 8000340:	e005      	b.n	800034e <pos+0xb8>
		break;
	case pin13 :
		return 20;
 8000342:	2314      	movs	r3, #20
 8000344:	e003      	b.n	800034e <pos+0xb8>
		break;
	case pin14 :
		return 24;
 8000346:	2318      	movs	r3, #24
 8000348:	e001      	b.n	800034e <pos+0xb8>
		break;
	case pin15 :
		return 28;
 800034a:	231c      	movs	r3, #28
 800034c:	e7ff      	b.n	800034e <pos+0xb8>
		break;
	}
}
 800034e:	4618      	mov	r0, r3
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <MCAL_GPIO_READPIN>:
		RCC->APB2RSTR &= ~pin6;
	}
}

uint8_t MCAL_GPIO_READPIN	(GPIOx_R* GPIOx , uint32_t pinNumper)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	if ((GPIOx->IDR & pinNumper) != 0 )
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689a      	ldr	r2, [r3, #8]
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	4013      	ands	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MCAL_GPIO_READPIN+0x1a>
	{
		return 1 ;
 800036e:	2301      	movs	r3, #1
 8000370:	e000      	b.n	8000374 <MCAL_GPIO_READPIN+0x1c>
	}
	return 0 ;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <MCAL_GPIO_TOGGLEPIN>:
{
	GPIOx->ODR = Value;
}

void MCAL_GPIO_TOGGLEPIN	(GPIOx_R* GPIOx , uint32_t pinNumper)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
 8000386:	6039      	str	r1, [r7, #0]
	GPIOx->ODR ^= pinNumper ;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	405a      	eors	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60da      	str	r2, [r3, #12]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <MCAL_GPIO_INIT>:

//void MCAL_GPIO_LOCKPIN		(GPIOx_R* GPIOx , uint8_t pinNumper);


void MCAL_GPIO_INIT			(GPIOx_R* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 800039e:	b590      	push	{r4, r7, lr}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	6039      	str	r1, [r7, #0]
	volatile uint32_t *confreg =NULL ;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
	confreg = ((PinConfig->GPIO_PinNumber)<pin8)? &GPIOx->CRL : &GPIOx->CRH ;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2bff      	cmp	r3, #255	; 0xff
 80003b2:	d801      	bhi.n	80003b8 <MCAL_GPIO_INIT+0x1a>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	e001      	b.n	80003bc <MCAL_GPIO_INIT+0x1e>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3304      	adds	r3, #4
 80003bc:	60fb      	str	r3, [r7, #12]
	*confreg &= ~(0xf<<pos(PinConfig->GPIO_PinNumber));
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff67 	bl	8000296 <pos>
 80003c8:	4602      	mov	r2, r0
 80003ca:	230f      	movs	r3, #15
 80003cc:	4093      	lsls	r3, r2
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	401a      	ands	r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE<4)
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	2b03      	cmp	r3, #3
 80003e0:	d84e      	bhi.n	8000480 <MCAL_GPIO_INIT+0xe2>
	{
		switch (PinConfig->GPIO_MODE)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d016      	beq.n	8000418 <MCAL_GPIO_INIT+0x7a>
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	d02d      	beq.n	800044a <MCAL_GPIO_INIT+0xac>
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d000      	beq.n	80003f4 <MCAL_GPIO_INIT+0x56>


	}


}
 80003f2:	e067      	b.n	80004c4 <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	461c      	mov	r4, r3
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff49 	bl	8000296 <pos>
 8000404:	4603      	mov	r3, r0
 8000406:	3302      	adds	r3, #2
 8000408:	fa04 f203 	lsl.w	r2, r4, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	431a      	orrs	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	601a      	str	r2, [r3, #0]
			break;
 8000416:	e055      	b.n	80004c4 <MCAL_GPIO_INIT+0x126>
			*confreg |= PinConfig->GPIO_MODE << (pos(PinConfig->GPIO_PinNumber)+2);
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	461c      	mov	r4, r3
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff37 	bl	8000296 <pos>
 8000428:	4603      	mov	r3, r0
 800042a:	3302      	adds	r3, #2
 800042c:	fa04 f203 	lsl.w	r2, r4, r3
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	431a      	orrs	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
			break;
 8000448:	e03c      	b.n	80004c4 <MCAL_GPIO_INIT+0x126>
			*confreg |= (PinConfig->GPIO_MODE-1) << (pos(PinConfig->GPIO_PinNumber)+2);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	791b      	ldrb	r3, [r3, #4]
 800044e:	1e5c      	subs	r4, r3, #1
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff1e 	bl	8000296 <pos>
 800045a:	4603      	mov	r3, r0
 800045c:	3302      	adds	r3, #2
 800045e:	fa04 f203 	lsl.w	r2, r4, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	431a      	orrs	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68da      	ldr	r2, [r3, #12]
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	60da      	str	r2, [r3, #12]
			break;
 800047c:	bf00      	nop
 800047e:	e021      	b.n	80004c4 <MCAL_GPIO_INIT+0x126>
		*confreg |= (PinConfig->GPIO_MODE-4) << (pos(PinConfig->GPIO_PinNumber)+2);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	1f1c      	subs	r4, r3, #4
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff03 	bl	8000296 <pos>
 8000490:	4603      	mov	r3, r0
 8000492:	3302      	adds	r3, #2
 8000494:	fa04 f203 	lsl.w	r2, r4, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	431a      	orrs	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]
		*confreg |= (PinConfig->GPIO_Output_Speed) << (pos(PinConfig->GPIO_PinNumber));
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	461c      	mov	r4, r3
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fef2 	bl	8000296 <pos>
 80004b2:	4603      	mov	r3, r0
 80004b4:	fa04 f203 	lsl.w	r2, r4, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	431a      	orrs	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	e7ff      	b.n	80004c4 <MCAL_GPIO_INIT+0x126>
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	2500      	movs	r5, #0
 80004d0:	4e0c      	ldr	r6, [pc, #48]	; (8000504 <__libc_init_array+0x38>)
 80004d2:	4c0d      	ldr	r4, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d4:	1ba4      	subs	r4, r4, r6
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	42a5      	cmp	r5, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	f000 f81a 	bl	8000514 <_init>
 80004e0:	2500      	movs	r5, #0
 80004e2:	4e0a      	ldr	r6, [pc, #40]	; (800050c <__libc_init_array+0x40>)
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <__libc_init_array+0x44>)
 80004e6:	1ba4      	subs	r4, r4, r6
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	42a5      	cmp	r5, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004f4:	4798      	blx	r3
 80004f6:	3501      	adds	r5, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004fe:	4798      	blx	r3
 8000500:	3501      	adds	r5, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800052c 	.word	0x0800052c
 8000508:	0800052c 	.word	0x0800052c
 800050c:	0800052c 	.word	0x0800052c
 8000510:	08000530 	.word	0x08000530

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
